/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     ListBankAccountsRecords
/// </summary>
[DataContract]
public sealed class ListBankAccountsRecords : IEquatable<ListBankAccountsRecords>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="ListBankAccountsRecords" /> class.
	/// </summary>
	/// <param name="bankAccountUid">Prim Unique ID.</param>
	/// <param name="accountType">Account Type.</param>
	/// <param name="name">Name.</param>
	/// <param name="balance">Balance.</param>
	/// <param name="currencyCode">Currency Code.</param>
	public ListBankAccountsRecords(int? bankAccountUid = default, string accountType = default, string name = default,
		decimal? balance = default, string currencyCode = default)
	{
		BankAccountUid = bankAccountUid;
		AccountType = accountType;
		Name = name;
		Balance = balance;
		CurrencyCode = currencyCode;
	}

	/// <summary>
	///     Prim Unique ID
	/// </summary>
	/// <value>Prim Unique ID</value>
	[DataMember(Name = "bankAccountUid", EmitDefaultValue = false)]
	public int? BankAccountUid { get; set; }

	/// <summary>
	///     Account Type
	/// </summary>
	/// <value>Account Type</value>
	[DataMember(Name = "accountType", EmitDefaultValue = false)]
	public string AccountType { get; set; }

	/// <summary>
	///     Name
	/// </summary>
	/// <value>Name</value>
	[DataMember(Name = "name", EmitDefaultValue = false)]
	public string Name { get; set; }

	/// <summary>
	///     Balance
	/// </summary>
	/// <value>Balance</value>
	[DataMember(Name = "balance", EmitDefaultValue = false)]
	public decimal? Balance { get; set; }

	/// <summary>
	///     Currency Code
	/// </summary>
	/// <value>Currency Code</value>
	[DataMember(Name = "currencyCode", EmitDefaultValue = false)]
	public string CurrencyCode { get; set; }

	/// <summary>
	///     Returns true if ListBankAccountsRecords instances are equal
	/// </summary>
	/// <param name="input">Instance of ListBankAccountsRecords to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(ListBankAccountsRecords input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				BankAccountUid == input.BankAccountUid ||
				(BankAccountUid != null &&
				 BankAccountUid.Equals(input.BankAccountUid))
			) &&
			(
				AccountType == input.AccountType ||
				(AccountType != null &&
				 AccountType.Equals(input.AccountType))
			) &&
			(
				Name == input.Name ||
				(Name != null &&
				 Name.Equals(input.Name))
			) &&
			(
				Balance == input.Balance ||
				(Balance != null &&
				 Balance.Equals(input.Balance))
			) &&
			(
				CurrencyCode == input.CurrencyCode ||
				(CurrencyCode != null &&
				 CurrencyCode.Equals(input.CurrencyCode))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class ListBankAccountsRecords {\n");
		sb.Append("  BankAccountUid: ").Append(BankAccountUid).Append("\n");
		sb.Append("  AccountType: ").Append(AccountType).Append("\n");
		sb.Append("  Name: ").Append(Name).Append("\n");
		sb.Append("  Balance: ").Append(Balance).Append("\n");
		sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as ListBankAccountsRecords);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (BankAccountUid != null)
			{
				hashCode = hashCode * 59 + BankAccountUid.GetHashCode();
			}

			if (AccountType != null)
			{
				hashCode = hashCode * 59 + AccountType.GetHashCode();
			}

			if (Name != null)
			{
				hashCode = hashCode * 59 + Name.GetHashCode();
			}

			if (Balance != null)
			{
				hashCode = hashCode * 59 + Balance.GetHashCode();
			}

			if (CurrencyCode != null)
			{
				hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
			}

			return hashCode;
		}
	}
}
