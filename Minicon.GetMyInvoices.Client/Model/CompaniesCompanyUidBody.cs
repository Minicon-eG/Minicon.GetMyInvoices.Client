/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     CompaniesCompanyUidBody
/// </summary>
[DataContract]
public sealed class CompaniesCompanyUidBody : IEquatable<CompaniesCompanyUidBody>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="CompaniesCompanyUidBody" /> class.
	/// </summary>
	/// <param name="name">Name of the company. (required).</param>
	/// <param name="countryUid">PRIM_UID of the country..</param>
	/// <param name="tags">Tags (Array).</param>
	/// <param name="street">Street.</param>
	/// <param name="zip">ZIP code.</param>
	/// <param name="city">City.</param>
	/// <param name="email">Email.</param>
	/// <param name="phone">Phone.</param>
	/// <param name="fax">Fax.</param>
	/// <param name="taxNumber">Tax Number.</param>
	/// <param name="vatId">VAT ID.</param>
	/// <param name="commercialRegister">Commercial Register.</param>
	/// <param name="iban">IBAN.</param>
	/// <param name="bic">BIC.</param>
	/// <param name="url">URL.</param>
	public CompaniesCompanyUidBody(string name = default, int? countryUid = default, List<string> tags = default,
		string street = default, string zip = default, string city = default, string email = default,
		string phone = default, string fax = default, string taxNumber = default, string vatId = default,
		string commercialRegister = default, string iban = default, string bic = default, string url = default)
	{
		// to ensure "name" is required (not null)
		if (name == null)
		{
			throw new InvalidDataException(
				"name is a required property for CompaniesCompanyUidBody and cannot be null");
		}

		Name = name;
		CountryUid = countryUid;
		Tags = tags;
		Street = street;
		Zip = zip;
		City = city;
		Email = email;
		Phone = phone;
		Fax = fax;
		TaxNumber = taxNumber;
		VatId = vatId;
		CommercialRegister = commercialRegister;
		Iban = iban;
		Bic = bic;
		Url = url;
	}

	/// <summary>
	///     Name of the company.
	/// </summary>
	/// <value>Name of the company.</value>
	[DataMember(Name = "name", EmitDefaultValue = false)]
	public string Name { get; set; }

	/// <summary>
	///     PRIM_UID of the country.
	/// </summary>
	/// <value>PRIM_UID of the country.</value>
	[DataMember(Name = "countryUid", EmitDefaultValue = false)]
	public int? CountryUid { get; set; }

	/// <summary>
	///     Tags (Array)
	/// </summary>
	/// <value>Tags (Array)</value>
	[DataMember(Name = "tags", EmitDefaultValue = false)]
	public List<string> Tags { get; set; }

	/// <summary>
	///     Street
	/// </summary>
	/// <value>Street</value>
	[DataMember(Name = "street", EmitDefaultValue = false)]
	public string Street { get; set; }

	/// <summary>
	///     ZIP code
	/// </summary>
	/// <value>ZIP code</value>
	[DataMember(Name = "zip", EmitDefaultValue = false)]
	public string Zip { get; set; }

	/// <summary>
	///     City
	/// </summary>
	/// <value>City</value>
	[DataMember(Name = "city", EmitDefaultValue = false)]
	public string City { get; set; }

	/// <summary>
	///     Email
	/// </summary>
	/// <value>Email</value>
	[DataMember(Name = "email", EmitDefaultValue = false)]
	public string Email { get; set; }

	/// <summary>
	///     Phone
	/// </summary>
	/// <value>Phone</value>
	[DataMember(Name = "phone", EmitDefaultValue = false)]
	public string Phone { get; set; }

	/// <summary>
	///     Fax
	/// </summary>
	/// <value>Fax</value>
	[DataMember(Name = "fax", EmitDefaultValue = false)]
	public string Fax { get; set; }

	/// <summary>
	///     Tax Number
	/// </summary>
	/// <value>Tax Number</value>
	[DataMember(Name = "taxNumber", EmitDefaultValue = false)]
	public string TaxNumber { get; set; }

	/// <summary>
	///     VAT ID
	/// </summary>
	/// <value>VAT ID</value>
	[DataMember(Name = "vatId", EmitDefaultValue = false)]
	public string VatId { get; set; }

	/// <summary>
	///     Commercial Register
	/// </summary>
	/// <value>Commercial Register</value>
	[DataMember(Name = "commercialRegister", EmitDefaultValue = false)]
	public string CommercialRegister { get; set; }

	/// <summary>
	///     IBAN
	/// </summary>
	/// <value>IBAN</value>
	[DataMember(Name = "iban", EmitDefaultValue = false)]
	public string Iban { get; set; }

	/// <summary>
	///     BIC
	/// </summary>
	/// <value>BIC</value>
	[DataMember(Name = "bic", EmitDefaultValue = false)]
	public string Bic { get; set; }

	/// <summary>
	///     URL
	/// </summary>
	/// <value>URL</value>
	[DataMember(Name = "url", EmitDefaultValue = false)]
	public string Url { get; set; }

	/// <summary>
	///     Returns true if CompaniesCompanyUidBody instances are equal
	/// </summary>
	/// <param name="input">Instance of CompaniesCompanyUidBody to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(CompaniesCompanyUidBody input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				Name == input.Name ||
				(Name != null &&
				 Name.Equals(input.Name))
			) &&
			(
				CountryUid == input.CountryUid ||
				(CountryUid != null &&
				 CountryUid.Equals(input.CountryUid))
			) &&
			(
				Tags == input.Tags ||
				(Tags != null &&
				 input.Tags != null &&
				 Tags.SequenceEqual(input.Tags))
			) &&
			(
				Street == input.Street ||
				(Street != null &&
				 Street.Equals(input.Street))
			) &&
			(
				Zip == input.Zip ||
				(Zip != null &&
				 Zip.Equals(input.Zip))
			) &&
			(
				City == input.City ||
				(City != null &&
				 City.Equals(input.City))
			) &&
			(
				Email == input.Email ||
				(Email != null &&
				 Email.Equals(input.Email))
			) &&
			(
				Phone == input.Phone ||
				(Phone != null &&
				 Phone.Equals(input.Phone))
			) &&
			(
				Fax == input.Fax ||
				(Fax != null &&
				 Fax.Equals(input.Fax))
			) &&
			(
				TaxNumber == input.TaxNumber ||
				(TaxNumber != null &&
				 TaxNumber.Equals(input.TaxNumber))
			) &&
			(
				VatId == input.VatId ||
				(VatId != null &&
				 VatId.Equals(input.VatId))
			) &&
			(
				CommercialRegister == input.CommercialRegister ||
				(CommercialRegister != null &&
				 CommercialRegister.Equals(input.CommercialRegister))
			) &&
			(
				Iban == input.Iban ||
				(Iban != null &&
				 Iban.Equals(input.Iban))
			) &&
			(
				Bic == input.Bic ||
				(Bic != null &&
				 Bic.Equals(input.Bic))
			) &&
			(
				Url == input.Url ||
				(Url != null &&
				 Url.Equals(input.Url))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class CompaniesCompanyUidBody {\n");
		sb.Append("  Name: ").Append(Name).Append("\n");
		sb.Append("  CountryUid: ").Append(CountryUid).Append("\n");
		sb.Append("  Tags: ").Append(Tags).Append("\n");
		sb.Append("  Street: ").Append(Street).Append("\n");
		sb.Append("  Zip: ").Append(Zip).Append("\n");
		sb.Append("  City: ").Append(City).Append("\n");
		sb.Append("  Email: ").Append(Email).Append("\n");
		sb.Append("  Phone: ").Append(Phone).Append("\n");
		sb.Append("  Fax: ").Append(Fax).Append("\n");
		sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
		sb.Append("  VatId: ").Append(VatId).Append("\n");
		sb.Append("  CommercialRegister: ").Append(CommercialRegister).Append("\n");
		sb.Append("  Iban: ").Append(Iban).Append("\n");
		sb.Append("  Bic: ").Append(Bic).Append("\n");
		sb.Append("  Url: ").Append(Url).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as CompaniesCompanyUidBody);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (Name != null)
			{
				hashCode = hashCode * 59 + Name.GetHashCode();
			}

			if (CountryUid != null)
			{
				hashCode = hashCode * 59 + CountryUid.GetHashCode();
			}

			if (Tags != null)
			{
				hashCode = hashCode * 59 + Tags.GetHashCode();
			}

			if (Street != null)
			{
				hashCode = hashCode * 59 + Street.GetHashCode();
			}

			if (Zip != null)
			{
				hashCode = hashCode * 59 + Zip.GetHashCode();
			}

			if (City != null)
			{
				hashCode = hashCode * 59 + City.GetHashCode();
			}

			if (Email != null)
			{
				hashCode = hashCode * 59 + Email.GetHashCode();
			}

			if (Phone != null)
			{
				hashCode = hashCode * 59 + Phone.GetHashCode();
			}

			if (Fax != null)
			{
				hashCode = hashCode * 59 + Fax.GetHashCode();
			}

			if (TaxNumber != null)
			{
				hashCode = hashCode * 59 + TaxNumber.GetHashCode();
			}

			if (VatId != null)
			{
				hashCode = hashCode * 59 + VatId.GetHashCode();
			}

			if (CommercialRegister != null)
			{
				hashCode = hashCode * 59 + CommercialRegister.GetHashCode();
			}

			if (Iban != null)
			{
				hashCode = hashCode * 59 + Iban.GetHashCode();
			}

			if (Bic != null)
			{
				hashCode = hashCode * 59 + Bic.GetHashCode();
			}

			if (Url != null)
			{
				hashCode = hashCode * 59 + Url.GetHashCode();
			}

			return hashCode;
		}
	}
}
