/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     GetAttachmentMetaData
/// </summary>
[DataContract]
public sealed class GetAttachmentMetaData : IEquatable<GetAttachmentMetaData>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="GetAttachmentMetaData" /> class.
	/// </summary>
	/// <param name="attachmentUid">Attachment Unique ID.</param>
	/// <param name="filename">File Name.</param>
	/// <param name="description">description.</param>
	/// <param name="attachedAt">Attached At.</param>
	public GetAttachmentMetaData(int? attachmentUid = default, string filename = default, string description = default,
		string attachedAt = default)
	{
		AttachmentUid = attachmentUid;
		Filename = filename;
		Description = description;
		AttachedAt = attachedAt;
	}

	/// <summary>
	///     Attachment Unique ID
	/// </summary>
	/// <value>Attachment Unique ID</value>
	[DataMember(Name = "attachmentUid", EmitDefaultValue = false)]
	public int? AttachmentUid { get; set; }

	/// <summary>
	///     File Name
	/// </summary>
	/// <value>File Name</value>
	[DataMember(Name = "filename", EmitDefaultValue = false)]
	public string Filename { get; set; }

	/// <summary>
	///     description
	/// </summary>
	/// <value>description</value>
	[DataMember(Name = "description", EmitDefaultValue = false)]
	public string Description { get; set; }

	/// <summary>
	///     Attached At
	/// </summary>
	/// <value>Attached At</value>
	[DataMember(Name = "attachedAt", EmitDefaultValue = false)]
	public string AttachedAt { get; set; }

	/// <summary>
	///     Returns true if GetAttachmentMetaData instances are equal
	/// </summary>
	/// <param name="input">Instance of GetAttachmentMetaData to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(GetAttachmentMetaData input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				AttachmentUid == input.AttachmentUid ||
				(AttachmentUid != null &&
				 AttachmentUid.Equals(input.AttachmentUid))
			) &&
			(
				Filename == input.Filename ||
				(Filename != null &&
				 Filename.Equals(input.Filename))
			) &&
			(
				Description == input.Description ||
				(Description != null &&
				 Description.Equals(input.Description))
			) &&
			(
				AttachedAt == input.AttachedAt ||
				(AttachedAt != null &&
				 AttachedAt.Equals(input.AttachedAt))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class GetAttachmentMetaData {\n");
		sb.Append("  AttachmentUid: ").Append(AttachmentUid).Append("\n");
		sb.Append("  Filename: ").Append(Filename).Append("\n");
		sb.Append("  Description: ").Append(Description).Append("\n");
		sb.Append("  AttachedAt: ").Append(AttachedAt).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as GetAttachmentMetaData);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (AttachmentUid != null)
			{
				hashCode = hashCode * 59 + AttachmentUid.GetHashCode();
			}

			if (Filename != null)
			{
				hashCode = hashCode * 59 + Filename.GetHashCode();
			}

			if (Description != null)
			{
				hashCode = hashCode * 59 + Description.GetHashCode();
			}

			if (AttachedAt != null)
			{
				hashCode = hashCode * 59 + AttachedAt.GetHashCode();
			}

			return hashCode;
		}
	}
}
