/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     TransactionUidIgnoreBody
/// </summary>
[DataContract]
public sealed class TransactionUidIgnoreBody : IEquatable<TransactionUidIgnoreBody>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="TransactionUidIgnoreBody" /> class.
	/// </summary>
	/// <param name="ignore">status of transaction. (required).</param>
	/// <param name="ignoreComment">Ignore comment of transaction..</param>
	public TransactionUidIgnoreBody(bool? ignore = default, string ignoreComment = default)
	{
		// to ensure "ignore" is required (not null)
		if (ignore == null)
		{
			throw new InvalidDataException(
				"ignore is a required property for TransactionUidIgnoreBody and cannot be null");
		}

		Ignore = ignore;
		IgnoreComment = ignoreComment;
	}

	/// <summary>
	///     status of transaction.
	/// </summary>
	/// <value>status of transaction.</value>
	[DataMember(Name = "ignore", EmitDefaultValue = false)]
	public bool? Ignore { get; set; }

	/// <summary>
	///     Ignore comment of transaction.
	/// </summary>
	/// <value>Ignore comment of transaction.</value>
	[DataMember(Name = "ignoreComment", EmitDefaultValue = false)]
	public string IgnoreComment { get; set; }

	/// <summary>
	///     Returns true if TransactionUidIgnoreBody instances are equal
	/// </summary>
	/// <param name="input">Instance of TransactionUidIgnoreBody to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(TransactionUidIgnoreBody input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				Ignore == input.Ignore ||
				(Ignore != null &&
				 Ignore.Equals(input.Ignore))
			) &&
			(
				IgnoreComment == input.IgnoreComment ||
				(IgnoreComment != null &&
				 IgnoreComment.Equals(input.IgnoreComment))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class TransactionUidIgnoreBody {\n");
		sb.Append("  Ignore: ").Append(Ignore).Append("\n");
		sb.Append("  IgnoreComment: ").Append(IgnoreComment).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as TransactionUidIgnoreBody);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (Ignore != null)
			{
				hashCode = hashCode * 59 + Ignore.GetHashCode();
			}

			if (IgnoreComment != null)
			{
				hashCode = hashCode * 59 + IgnoreComment.GetHashCode();
			}

			return hashCode;
		}
	}
}
