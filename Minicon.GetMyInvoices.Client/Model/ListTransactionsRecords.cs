/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     ListTransactionsRecords
/// </summary>
[DataContract]
public sealed class ListTransactionsRecords : IEquatable<ListTransactionsRecords>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="ListTransactionsRecords" /> class.
	/// </summary>
	/// <param name="transactionUid">Prim Unique ID.</param>
	/// <param name="accountUid">Account Unique ID.</param>
	/// <param name="bankAccountUid">Bank Account Unique ID.</param>
	/// <param name="bookingDate">Booking Date.</param>
	/// <param name="description">Description.</param>
	/// <param name="amount">Amount.</param>
	/// <param name="currencyCode">Currency Code.</param>
	/// <param name="accountName">Account Name.</param>
	/// <param name="status">Status.</param>
	/// <param name="creditorId">Creditor ID.</param>
	/// <param name="paymentPartnerName">Payment Partner Name.</param>
	/// <param name="tags">Tags (Array).</param>
	/// <param name="ignoreComment">Ignore comment.</param>
	public ListTransactionsRecords(int? transactionUid = default, int? accountUid = default,
		int? bankAccountUid = default, DateTime? bookingDate = default, string description = default,
		decimal? amount = default, string currencyCode = default, string accountName = default, string status = default,
		string creditorId = default, string paymentPartnerName = default, List<string> tags = default,
		string ignoreComment = default)
	{
		TransactionUid = transactionUid;
		AccountUid = accountUid;
		BankAccountUid = bankAccountUid;
		BookingDate = bookingDate;
		Description = description;
		Amount = amount;
		CurrencyCode = currencyCode;
		AccountName = accountName;
		Status = status;
		CreditorId = creditorId;
		PaymentPartnerName = paymentPartnerName;
		Tags = tags;
		IgnoreComment = ignoreComment;
	}

	/// <summary>
	///     Prim Unique ID
	/// </summary>
	/// <value>Prim Unique ID</value>
	[DataMember(Name = "transactionUid", EmitDefaultValue = false)]
	public int? TransactionUid { get; set; }

	/// <summary>
	///     Account Unique ID
	/// </summary>
	/// <value>Account Unique ID</value>
	[DataMember(Name = "accountUid", EmitDefaultValue = false)]
	public int? AccountUid { get; set; }

	/// <summary>
	///     Bank Account Unique ID
	/// </summary>
	/// <value>Bank Account Unique ID</value>
	[DataMember(Name = "bankAccountUid", EmitDefaultValue = false)]
	public int? BankAccountUid { get; set; }

	/// <summary>
	///     Booking Date
	/// </summary>
	/// <value>Booking Date</value>
	[DataMember(Name = "bookingDate", EmitDefaultValue = false)]
	[JsonConverter(typeof(SwaggerDateConverter))]
	public DateTime? BookingDate { get; set; }

	/// <summary>
	///     Description
	/// </summary>
	/// <value>Description</value>
	[DataMember(Name = "description", EmitDefaultValue = false)]
	public string Description { get; set; }

	/// <summary>
	///     Amount
	/// </summary>
	/// <value>Amount</value>
	[DataMember(Name = "amount", EmitDefaultValue = false)]
	public decimal? Amount { get; set; }

	/// <summary>
	///     Currency Code
	/// </summary>
	/// <value>Currency Code</value>
	[DataMember(Name = "currencyCode", EmitDefaultValue = false)]
	public string CurrencyCode { get; set; }

	/// <summary>
	///     Account Name
	/// </summary>
	/// <value>Account Name</value>
	[DataMember(Name = "accountName", EmitDefaultValue = false)]
	public string AccountName { get; set; }

	/// <summary>
	///     Status
	/// </summary>
	/// <value>Status</value>
	[DataMember(Name = "status", EmitDefaultValue = false)]
	public string Status { get; set; }

	/// <summary>
	///     Creditor ID
	/// </summary>
	/// <value>Creditor ID</value>
	[DataMember(Name = "creditorId", EmitDefaultValue = false)]
	public string CreditorId { get; set; }

	/// <summary>
	///     Payment Partner Name
	/// </summary>
	/// <value>Payment Partner Name</value>
	[DataMember(Name = "paymentPartnerName", EmitDefaultValue = false)]
	public string PaymentPartnerName { get; set; }

	/// <summary>
	///     Tags (Array)
	/// </summary>
	/// <value>Tags (Array)</value>
	[DataMember(Name = "tags", EmitDefaultValue = false)]
	public List<string> Tags { get; set; }

	/// <summary>
	///     Ignore comment
	/// </summary>
	/// <value>Ignore comment</value>
	[DataMember(Name = "ignoreComment", EmitDefaultValue = false)]
	public string IgnoreComment { get; set; }

	/// <summary>
	///     Returns true if ListTransactionsRecords instances are equal
	/// </summary>
	/// <param name="input">Instance of ListTransactionsRecords to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(ListTransactionsRecords input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				TransactionUid == input.TransactionUid ||
				(TransactionUid != null &&
				 TransactionUid.Equals(input.TransactionUid))
			) &&
			(
				AccountUid == input.AccountUid ||
				(AccountUid != null &&
				 AccountUid.Equals(input.AccountUid))
			) &&
			(
				BankAccountUid == input.BankAccountUid ||
				(BankAccountUid != null &&
				 BankAccountUid.Equals(input.BankAccountUid))
			) &&
			(
				BookingDate == input.BookingDate ||
				(BookingDate != null &&
				 BookingDate.Equals(input.BookingDate))
			) &&
			(
				Description == input.Description ||
				(Description != null &&
				 Description.Equals(input.Description))
			) &&
			(
				Amount == input.Amount ||
				(Amount != null &&
				 Amount.Equals(input.Amount))
			) &&
			(
				CurrencyCode == input.CurrencyCode ||
				(CurrencyCode != null &&
				 CurrencyCode.Equals(input.CurrencyCode))
			) &&
			(
				AccountName == input.AccountName ||
				(AccountName != null &&
				 AccountName.Equals(input.AccountName))
			) &&
			(
				Status == input.Status ||
				(Status != null &&
				 Status.Equals(input.Status))
			) &&
			(
				CreditorId == input.CreditorId ||
				(CreditorId != null &&
				 CreditorId.Equals(input.CreditorId))
			) &&
			(
				PaymentPartnerName == input.PaymentPartnerName ||
				(PaymentPartnerName != null &&
				 PaymentPartnerName.Equals(input.PaymentPartnerName))
			) &&
			(
				Tags == input.Tags ||
				(Tags != null &&
				 input.Tags != null &&
				 Tags.SequenceEqual(input.Tags))
			) &&
			(
				IgnoreComment == input.IgnoreComment ||
				(IgnoreComment != null &&
				 IgnoreComment.Equals(input.IgnoreComment))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class ListTransactionsRecords {\n");
		sb.Append("  TransactionUid: ").Append(TransactionUid).Append("\n");
		sb.Append("  AccountUid: ").Append(AccountUid).Append("\n");
		sb.Append("  BankAccountUid: ").Append(BankAccountUid).Append("\n");
		sb.Append("  BookingDate: ").Append(BookingDate).Append("\n");
		sb.Append("  Description: ").Append(Description).Append("\n");
		sb.Append("  Amount: ").Append(Amount).Append("\n");
		sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
		sb.Append("  AccountName: ").Append(AccountName).Append("\n");
		sb.Append("  Status: ").Append(Status).Append("\n");
		sb.Append("  CreditorId: ").Append(CreditorId).Append("\n");
		sb.Append("  PaymentPartnerName: ").Append(PaymentPartnerName).Append("\n");
		sb.Append("  Tags: ").Append(Tags).Append("\n");
		sb.Append("  IgnoreComment: ").Append(IgnoreComment).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as ListTransactionsRecords);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (TransactionUid != null)
			{
				hashCode = hashCode * 59 + TransactionUid.GetHashCode();
			}

			if (AccountUid != null)
			{
				hashCode = hashCode * 59 + AccountUid.GetHashCode();
			}

			if (BankAccountUid != null)
			{
				hashCode = hashCode * 59 + BankAccountUid.GetHashCode();
			}

			if (BookingDate != null)
			{
				hashCode = hashCode * 59 + BookingDate.GetHashCode();
			}

			if (Description != null)
			{
				hashCode = hashCode * 59 + Description.GetHashCode();
			}

			if (Amount != null)
			{
				hashCode = hashCode * 59 + Amount.GetHashCode();
			}

			if (CurrencyCode != null)
			{
				hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
			}

			if (AccountName != null)
			{
				hashCode = hashCode * 59 + AccountName.GetHashCode();
			}

			if (Status != null)
			{
				hashCode = hashCode * 59 + Status.GetHashCode();
			}

			if (CreditorId != null)
			{
				hashCode = hashCode * 59 + CreditorId.GetHashCode();
			}

			if (PaymentPartnerName != null)
			{
				hashCode = hashCode * 59 + PaymentPartnerName.GetHashCode();
			}

			if (Tags != null)
			{
				hashCode = hashCode * 59 + Tags.GetHashCode();
			}

			if (IgnoreComment != null)
			{
				hashCode = hashCode * 59 + IgnoreComment.GetHashCode();
			}

			return hashCode;
		}
	}
}
