/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     TransactionsTransactionUidBody
/// </summary>
[DataContract]
public sealed class TransactionsTransactionUidBody : IEquatable<TransactionsTransactionUidBody>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="TransactionsTransactionUidBody" /> class.
	/// </summary>
	/// <param name="bookingDate">Date of booking..</param>
	/// <param name="valueDate">Value Date..</param>
	/// <param name="transactionType">Transaction type.</param>
	/// <param name="description">Description.</param>
	/// <param name="amount">Amount.</param>
	/// <param name="currencyCode">Currency Code.</param>
	/// <param name="clientAccount">Phone.</param>
	/// <param name="clientBankCode">Bank Code.</param>
	/// <param name="clientIban">IBAN.</param>
	/// <param name="creditorId">Creditor ID.</param>
	/// <param name="paymentPartnerName">Payment Partner Name.</param>
	/// <param name="status">Status.</param>
	/// <param name="tags">Tags (Array).</param>
	public TransactionsTransactionUidBody(DateTime? bookingDate = default, DateTime? valueDate = default,
		string transactionType = default, string description = default, decimal? amount = default,
		string currencyCode = default, string clientAccount = default, string clientBankCode = default,
		string clientIban = default, string creditorId = default, string paymentPartnerName = default,
		string status = default, List<string> tags = default)
	{
		BookingDate = bookingDate;
		ValueDate = valueDate;
		TransactionType = transactionType;
		Description = description;
		Amount = amount;
		CurrencyCode = currencyCode;
		ClientAccount = clientAccount;
		ClientBankCode = clientBankCode;
		ClientIban = clientIban;
		CreditorId = creditorId;
		PaymentPartnerName = paymentPartnerName;
		Status = status;
		Tags = tags;
	}

	/// <summary>
	///     Date of booking.
	/// </summary>
	/// <value>Date of booking.</value>
	[DataMember(Name = "bookingDate", EmitDefaultValue = false)]
	[JsonConverter(typeof(SwaggerDateConverter))]
	public DateTime? BookingDate { get; set; }

	/// <summary>
	///     Value Date.
	/// </summary>
	/// <value>Value Date.</value>
	[DataMember(Name = "valueDate", EmitDefaultValue = false)]
	[JsonConverter(typeof(SwaggerDateConverter))]
	public DateTime? ValueDate { get; set; }

	/// <summary>
	///     Transaction type
	/// </summary>
	/// <value>Transaction type</value>
	[DataMember(Name = "transactionType", EmitDefaultValue = false)]
	public string TransactionType { get; set; }

	/// <summary>
	///     Description
	/// </summary>
	/// <value>Description</value>
	[DataMember(Name = "description", EmitDefaultValue = false)]
	public string Description { get; set; }

	/// <summary>
	///     Amount
	/// </summary>
	/// <value>Amount</value>
	[DataMember(Name = "amount", EmitDefaultValue = false)]
	public decimal? Amount { get; set; }

	/// <summary>
	///     Currency Code
	/// </summary>
	/// <value>Currency Code</value>
	[DataMember(Name = "currencyCode", EmitDefaultValue = false)]
	public string CurrencyCode { get; set; }

	/// <summary>
	///     Phone
	/// </summary>
	/// <value>Phone</value>
	[DataMember(Name = "clientAccount", EmitDefaultValue = false)]
	public string ClientAccount { get; set; }

	/// <summary>
	///     Bank Code
	/// </summary>
	/// <value>Bank Code</value>
	[DataMember(Name = "clientBankCode", EmitDefaultValue = false)]
	public string ClientBankCode { get; set; }

	/// <summary>
	///     IBAN
	/// </summary>
	/// <value>IBAN</value>
	[DataMember(Name = "clientIban", EmitDefaultValue = false)]
	public string ClientIban { get; set; }

	/// <summary>
	///     Creditor ID
	/// </summary>
	/// <value>Creditor ID</value>
	[DataMember(Name = "creditorId", EmitDefaultValue = false)]
	public string CreditorId { get; set; }

	/// <summary>
	///     Payment Partner Name
	/// </summary>
	/// <value>Payment Partner Name</value>
	[DataMember(Name = "paymentPartnerName", EmitDefaultValue = false)]
	public string PaymentPartnerName { get; set; }

	/// <summary>
	///     Status
	/// </summary>
	/// <value>Status</value>
	[DataMember(Name = "status", EmitDefaultValue = false)]
	public string Status { get; set; }

	/// <summary>
	///     Tags (Array)
	/// </summary>
	/// <value>Tags (Array)</value>
	[DataMember(Name = "tags", EmitDefaultValue = false)]
	public List<string> Tags { get; set; }

	/// <summary>
	///     Returns true if TransactionsTransactionUidBody instances are equal
	/// </summary>
	/// <param name="input">Instance of TransactionsTransactionUidBody to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(TransactionsTransactionUidBody input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				BookingDate == input.BookingDate ||
				(BookingDate != null &&
				 BookingDate.Equals(input.BookingDate))
			) &&
			(
				ValueDate == input.ValueDate ||
				(ValueDate != null &&
				 ValueDate.Equals(input.ValueDate))
			) &&
			(
				TransactionType == input.TransactionType ||
				(TransactionType != null &&
				 TransactionType.Equals(input.TransactionType))
			) &&
			(
				Description == input.Description ||
				(Description != null &&
				 Description.Equals(input.Description))
			) &&
			(
				Amount == input.Amount ||
				(Amount != null &&
				 Amount.Equals(input.Amount))
			) &&
			(
				CurrencyCode == input.CurrencyCode ||
				(CurrencyCode != null &&
				 CurrencyCode.Equals(input.CurrencyCode))
			) &&
			(
				ClientAccount == input.ClientAccount ||
				(ClientAccount != null &&
				 ClientAccount.Equals(input.ClientAccount))
			) &&
			(
				ClientBankCode == input.ClientBankCode ||
				(ClientBankCode != null &&
				 ClientBankCode.Equals(input.ClientBankCode))
			) &&
			(
				ClientIban == input.ClientIban ||
				(ClientIban != null &&
				 ClientIban.Equals(input.ClientIban))
			) &&
			(
				CreditorId == input.CreditorId ||
				(CreditorId != null &&
				 CreditorId.Equals(input.CreditorId))
			) &&
			(
				PaymentPartnerName == input.PaymentPartnerName ||
				(PaymentPartnerName != null &&
				 PaymentPartnerName.Equals(input.PaymentPartnerName))
			) &&
			(
				Status == input.Status ||
				(Status != null &&
				 Status.Equals(input.Status))
			) &&
			(
				Tags == input.Tags ||
				(Tags != null &&
				 input.Tags != null &&
				 Tags.SequenceEqual(input.Tags))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class TransactionsTransactionUidBody {\n");
		sb.Append("  BookingDate: ").Append(BookingDate).Append("\n");
		sb.Append("  ValueDate: ").Append(ValueDate).Append("\n");
		sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
		sb.Append("  Description: ").Append(Description).Append("\n");
		sb.Append("  Amount: ").Append(Amount).Append("\n");
		sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
		sb.Append("  ClientAccount: ").Append(ClientAccount).Append("\n");
		sb.Append("  ClientBankCode: ").Append(ClientBankCode).Append("\n");
		sb.Append("  ClientIban: ").Append(ClientIban).Append("\n");
		sb.Append("  CreditorId: ").Append(CreditorId).Append("\n");
		sb.Append("  PaymentPartnerName: ").Append(PaymentPartnerName).Append("\n");
		sb.Append("  Status: ").Append(Status).Append("\n");
		sb.Append("  Tags: ").Append(Tags).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as TransactionsTransactionUidBody);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (BookingDate != null)
			{
				hashCode = hashCode * 59 + BookingDate.GetHashCode();
			}

			if (ValueDate != null)
			{
				hashCode = hashCode * 59 + ValueDate.GetHashCode();
			}

			if (TransactionType != null)
			{
				hashCode = hashCode * 59 + TransactionType.GetHashCode();
			}

			if (Description != null)
			{
				hashCode = hashCode * 59 + Description.GetHashCode();
			}

			if (Amount != null)
			{
				hashCode = hashCode * 59 + Amount.GetHashCode();
			}

			if (CurrencyCode != null)
			{
				hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
			}

			if (ClientAccount != null)
			{
				hashCode = hashCode * 59 + ClientAccount.GetHashCode();
			}

			if (ClientBankCode != null)
			{
				hashCode = hashCode * 59 + ClientBankCode.GetHashCode();
			}

			if (ClientIban != null)
			{
				hashCode = hashCode * 59 + ClientIban.GetHashCode();
			}

			if (CreditorId != null)
			{
				hashCode = hashCode * 59 + CreditorId.GetHashCode();
			}

			if (PaymentPartnerName != null)
			{
				hashCode = hashCode * 59 + PaymentPartnerName.GetHashCode();
			}

			if (Status != null)
			{
				hashCode = hashCode * 59 + Status.GetHashCode();
			}

			if (Tags != null)
			{
				hashCode = hashCode * 59 + Tags.GetHashCode();
			}

			return hashCode;
		}
	}
}
