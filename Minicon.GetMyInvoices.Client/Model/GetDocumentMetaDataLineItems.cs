/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     GetDocumentMetaDataLineItems
/// </summary>
[DataContract]
public sealed class GetDocumentMetaDataLineItems : IEquatable<GetDocumentMetaDataLineItems>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="GetDocumentMetaDataLineItems" /> class.
	/// </summary>
	/// <param name="quantity">Quantity.</param>
	/// <param name="description">Description.</param>
	/// <param name="taxPercentage">Tax Percentage.</param>
	/// <param name="taxAmount">Tax Amount.</param>
	/// <param name="unitNetPrice">Unit Net Price.</param>
	/// <param name="totalGross">Total Gross.</param>
	public GetDocumentMetaDataLineItems(decimal? quantity = default, string description = default,
		decimal? taxPercentage = default, decimal? taxAmount = default, decimal? unitNetPrice = default,
		decimal? totalGross = default)
	{
		Quantity = quantity;
		Description = description;
		TaxPercentage = taxPercentage;
		TaxAmount = taxAmount;
		UnitNetPrice = unitNetPrice;
		TotalGross = totalGross;
	}

	/// <summary>
	///     Quantity
	/// </summary>
	/// <value>Quantity</value>
	[DataMember(Name = "quantity", EmitDefaultValue = false)]
	public decimal? Quantity { get; set; }

	/// <summary>
	///     Description
	/// </summary>
	/// <value>Description</value>
	[DataMember(Name = "description", EmitDefaultValue = false)]
	public string Description { get; set; }

	/// <summary>
	///     Tax Percentage
	/// </summary>
	/// <value>Tax Percentage</value>
	[DataMember(Name = "tax_percentage", EmitDefaultValue = false)]
	public decimal? TaxPercentage { get; set; }

	/// <summary>
	///     Tax Amount
	/// </summary>
	/// <value>Tax Amount</value>
	[DataMember(Name = "tax_amount", EmitDefaultValue = false)]
	public decimal? TaxAmount { get; set; }

	/// <summary>
	///     Unit Net Price
	/// </summary>
	/// <value>Unit Net Price</value>
	[DataMember(Name = "unit_net_price", EmitDefaultValue = false)]
	public decimal? UnitNetPrice { get; set; }

	/// <summary>
	///     Total Gross
	/// </summary>
	/// <value>Total Gross</value>
	[DataMember(Name = "total_gross", EmitDefaultValue = false)]
	public decimal? TotalGross { get; set; }

	/// <summary>
	///     Returns true if GetDocumentMetaDataLineItems instances are equal
	/// </summary>
	/// <param name="input">Instance of GetDocumentMetaDataLineItems to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(GetDocumentMetaDataLineItems input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				Quantity == input.Quantity ||
				(Quantity != null &&
				 Quantity.Equals(input.Quantity))
			) &&
			(
				Description == input.Description ||
				(Description != null &&
				 Description.Equals(input.Description))
			) &&
			(
				TaxPercentage == input.TaxPercentage ||
				(TaxPercentage != null &&
				 TaxPercentage.Equals(input.TaxPercentage))
			) &&
			(
				TaxAmount == input.TaxAmount ||
				(TaxAmount != null &&
				 TaxAmount.Equals(input.TaxAmount))
			) &&
			(
				UnitNetPrice == input.UnitNetPrice ||
				(UnitNetPrice != null &&
				 UnitNetPrice.Equals(input.UnitNetPrice))
			) &&
			(
				TotalGross == input.TotalGross ||
				(TotalGross != null &&
				 TotalGross.Equals(input.TotalGross))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class GetDocumentMetaDataLineItems {\n");
		sb.Append("  Quantity: ").Append(Quantity).Append("\n");
		sb.Append("  Description: ").Append(Description).Append("\n");
		sb.Append("  TaxPercentage: ").Append(TaxPercentage).Append("\n");
		sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
		sb.Append("  UnitNetPrice: ").Append(UnitNetPrice).Append("\n");
		sb.Append("  TotalGross: ").Append(TotalGross).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as GetDocumentMetaDataLineItems);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (Quantity != null)
			{
				hashCode = hashCode * 59 + Quantity.GetHashCode();
			}

			if (Description != null)
			{
				hashCode = hashCode * 59 + Description.GetHashCode();
			}

			if (TaxPercentage != null)
			{
				hashCode = hashCode * 59 + TaxPercentage.GetHashCode();
			}

			if (TaxAmount != null)
			{
				hashCode = hashCode * 59 + TaxAmount.GetHashCode();
			}

			if (UnitNetPrice != null)
			{
				hashCode = hashCode * 59 + UnitNetPrice.GetHashCode();
			}

			if (TotalGross != null)
			{
				hashCode = hashCode * 59 + TotalGross.GetHashCode();
			}

			return hashCode;
		}
	}
}
