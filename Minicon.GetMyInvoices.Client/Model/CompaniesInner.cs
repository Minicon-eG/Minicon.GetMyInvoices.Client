/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     CompaniesInner
/// </summary>
[DataContract]
public sealed class CompaniesInner : IEquatable<CompaniesInner>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="CompaniesInner" /> class.
	/// </summary>
	/// <param name="companyUid">Unique ID.</param>
	/// <param name="name">Company Name.</param>
	/// <param name="companyType">Company Type.</param>
	/// <param name="note">Company Note.</param>
	/// <param name="tags">Company Tags.</param>
	/// <param name="supplierUid">Supplier UID.</param>
	public CompaniesInner(int? companyUid = default, string name = default, string companyType = default,
		string note = default, List<string> tags = default, int? supplierUid = default)
	{
		CompanyUid = companyUid;
		Name = name;
		CompanyType = companyType;
		Note = note;
		Tags = tags;
		SupplierUid = supplierUid;
	}

	/// <summary>
	///     Unique ID
	/// </summary>
	/// <value>Unique ID</value>
	[DataMember(Name = "companyUid", EmitDefaultValue = false)]
	public int? CompanyUid { get; set; }

	/// <summary>
	///     Company Name
	/// </summary>
	/// <value>Company Name</value>
	[DataMember(Name = "name", EmitDefaultValue = false)]
	public string Name { get; set; }

	/// <summary>
	///     Company Type
	/// </summary>
	/// <value>Company Type</value>
	[DataMember(Name = "companyType", EmitDefaultValue = false)]
	public string CompanyType { get; set; }

	/// <summary>
	///     Company Note
	/// </summary>
	/// <value>Company Note</value>
	[DataMember(Name = "note", EmitDefaultValue = false)]
	public string Note { get; set; }

	/// <summary>
	///     Company Tags
	/// </summary>
	/// <value>Company Tags</value>
	[DataMember(Name = "tags", EmitDefaultValue = false)]
	public List<string> Tags { get; set; }

	/// <summary>
	///     Supplier UID
	/// </summary>
	/// <value>Supplier UID</value>
	[DataMember(Name = "supplierUid", EmitDefaultValue = false)]
	public int? SupplierUid { get; set; }

	/// <summary>
	///     Returns true if CompaniesInner instances are equal
	/// </summary>
	/// <param name="input">Instance of CompaniesInner to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(CompaniesInner input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				CompanyUid == input.CompanyUid ||
				(CompanyUid != null &&
				 CompanyUid.Equals(input.CompanyUid))
			) &&
			(
				Name == input.Name ||
				(Name != null &&
				 Name.Equals(input.Name))
			) &&
			(
				CompanyType == input.CompanyType ||
				(CompanyType != null &&
				 CompanyType.Equals(input.CompanyType))
			) &&
			(
				Note == input.Note ||
				(Note != null &&
				 Note.Equals(input.Note))
			) &&
			(
				Tags == input.Tags ||
				(Tags != null &&
				 input.Tags != null &&
				 Tags.SequenceEqual(input.Tags))
			) &&
			(
				SupplierUid == input.SupplierUid ||
				(SupplierUid != null &&
				 SupplierUid.Equals(input.SupplierUid))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class CompaniesInner {\n");
		sb.Append("  CompanyUid: ").Append(CompanyUid).Append("\n");
		sb.Append("  Name: ").Append(Name).Append("\n");
		sb.Append("  CompanyType: ").Append(CompanyType).Append("\n");
		sb.Append("  Note: ").Append(Note).Append("\n");
		sb.Append("  Tags: ").Append(Tags).Append("\n");
		sb.Append("  SupplierUid: ").Append(SupplierUid).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as CompaniesInner);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (CompanyUid != null)
			{
				hashCode = hashCode * 59 + CompanyUid.GetHashCode();
			}

			if (Name != null)
			{
				hashCode = hashCode * 59 + Name.GetHashCode();
			}

			if (CompanyType != null)
			{
				hashCode = hashCode * 59 + CompanyType.GetHashCode();
			}

			if (Note != null)
			{
				hashCode = hashCode * 59 + Note.GetHashCode();
			}

			if (Tags != null)
			{
				hashCode = hashCode * 59 + Tags.GetHashCode();
			}

			if (SupplierUid != null)
			{
				hashCode = hashCode * 59 + SupplierUid.GetHashCode();
			}

			return hashCode;
		}
	}
}
