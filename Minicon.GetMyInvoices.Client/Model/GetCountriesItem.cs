/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     GetCountriesItem
/// </summary>
[DataContract]
public sealed class GetCountriesItem : IEquatable<GetCountriesItem>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="GetCountriesItem" /> class.
	/// </summary>
	/// <param name="countryUid">Unique ID.</param>
	/// <param name="name">Name.</param>
	/// <param name="translations">translations.</param>
	/// <param name="countryCode">Country Code.</param>
	/// <param name="vat">Tax Rate.</param>
	/// <param name="isEu">Is EU.</param>
	public GetCountriesItem(int? countryUid = default, string name = default,
		GetCountriesItemTranslations translations = default, string countryCode = default, int? vat = default,
		int? isEu = default)
	{
		CountryUid = countryUid;
		Name = name;
		Translations = translations;
		CountryCode = countryCode;
		Vat = vat;
		IsEu = isEu;
	}

	/// <summary>
	///     Unique ID
	/// </summary>
	/// <value>Unique ID</value>
	[DataMember(Name = "countryUid", EmitDefaultValue = false)]
	public int? CountryUid { get; set; }

	/// <summary>
	///     Name
	/// </summary>
	/// <value>Name</value>
	[DataMember(Name = "name", EmitDefaultValue = false)]
	public string Name { get; set; }

	/// <summary>
	///     Gets or Sets Translations
	/// </summary>
	[DataMember(Name = "translations", EmitDefaultValue = false)]
	public GetCountriesItemTranslations Translations { get; set; }

	/// <summary>
	///     Country Code
	/// </summary>
	/// <value>Country Code</value>
	[DataMember(Name = "countryCode", EmitDefaultValue = false)]
	public string CountryCode { get; set; }

	/// <summary>
	///     Tax Rate
	/// </summary>
	/// <value>Tax Rate</value>
	[DataMember(Name = "vat", EmitDefaultValue = false)]
	public int? Vat { get; set; }

	/// <summary>
	///     Is EU
	/// </summary>
	/// <value>Is EU</value>
	[DataMember(Name = "is_eu", EmitDefaultValue = false)]
	public int? IsEu { get; set; }

	/// <summary>
	///     Returns true if GetCountriesItem instances are equal
	/// </summary>
	/// <param name="input">Instance of GetCountriesItem to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(GetCountriesItem input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				CountryUid == input.CountryUid ||
				(CountryUid != null &&
				 CountryUid.Equals(input.CountryUid))
			) &&
			(
				Name == input.Name ||
				(Name != null &&
				 Name.Equals(input.Name))
			) &&
			(
				Translations == input.Translations ||
				(Translations != null &&
				 Translations.Equals(input.Translations))
			) &&
			(
				CountryCode == input.CountryCode ||
				(CountryCode != null &&
				 CountryCode.Equals(input.CountryCode))
			) &&
			(
				Vat == input.Vat ||
				(Vat != null &&
				 Vat.Equals(input.Vat))
			) &&
			(
				IsEu == input.IsEu ||
				(IsEu != null &&
				 IsEu.Equals(input.IsEu))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class GetCountriesItem {\n");
		sb.Append("  CountryUid: ").Append(CountryUid).Append("\n");
		sb.Append("  Name: ").Append(Name).Append("\n");
		sb.Append("  Translations: ").Append(Translations).Append("\n");
		sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
		sb.Append("  Vat: ").Append(Vat).Append("\n");
		sb.Append("  IsEu: ").Append(IsEu).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as GetCountriesItem);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (CountryUid != null)
			{
				hashCode = hashCode * 59 + CountryUid.GetHashCode();
			}

			if (Name != null)
			{
				hashCode = hashCode * 59 + Name.GetHashCode();
			}

			if (Translations != null)
			{
				hashCode = hashCode * 59 + Translations.GetHashCode();
			}

			if (CountryCode != null)
			{
				hashCode = hashCode * 59 + CountryCode.GetHashCode();
			}

			if (Vat != null)
			{
				hashCode = hashCode * 59 + Vat.GetHashCode();
			}

			if (IsEu != null)
			{
				hashCode = hashCode * 59 + IsEu.GetHashCode();
			}

			return hashCode;
		}
	}
}
