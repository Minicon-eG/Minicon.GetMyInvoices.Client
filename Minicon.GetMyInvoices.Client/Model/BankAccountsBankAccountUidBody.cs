/* 
 * GetMyInvoices API Documentation
 *
 * Documentation for GetMyInvoices API endpoints.
 *
 * OpenAPI spec version: v3
 * Contact: support@getmyinvoices.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Minicon.GetMyInvoices.Client.Model;

/// <summary>
///     BankAccountsBankAccountUidBody
/// </summary>
[DataContract]
public sealed class BankAccountsBankAccountUidBody : IEquatable<BankAccountsBankAccountUidBody>
{
	/// <summary>
	///     Initializes a new instance of the <see cref="BankAccountsBankAccountUidBody" /> class.
	/// </summary>
	/// <param name="balance">New Balance (required).</param>
	/// <param name="currencyCode">Currency Code.</param>
	public BankAccountsBankAccountUidBody(decimal? balance = default, string currencyCode = default)
	{
		// to ensure "balance" is required (not null)
		if (balance == null)
		{
			throw new InvalidDataException(
				"balance is a required property for BankAccountsBankAccountUidBody and cannot be null");
		}

		Balance = balance;
		CurrencyCode = currencyCode;
	}

	/// <summary>
	///     New Balance
	/// </summary>
	/// <value>New Balance</value>
	[DataMember(Name = "balance", EmitDefaultValue = false)]
	public decimal? Balance { get; set; }

	/// <summary>
	///     Currency Code
	/// </summary>
	/// <value>Currency Code</value>
	[DataMember(Name = "currencyCode", EmitDefaultValue = false)]
	public string CurrencyCode { get; set; }

	/// <summary>
	///     Returns true if BankAccountsBankAccountUidBody instances are equal
	/// </summary>
	/// <param name="input">Instance of BankAccountsBankAccountUidBody to be compared</param>
	/// <returns>Boolean</returns>
	public bool Equals(BankAccountsBankAccountUidBody input)
	{
		if (input == null)
		{
			return false;
		}

		return
			(
				Balance == input.Balance ||
				(Balance != null &&
				 Balance.Equals(input.Balance))
			) &&
			(
				CurrencyCode == input.CurrencyCode ||
				(CurrencyCode != null &&
				 CurrencyCode.Equals(input.CurrencyCode))
			);
	}

	/// <summary>
	///     Returns the string presentation of the object
	/// </summary>
	/// <returns>String presentation of the object</returns>
	public override string ToString()
	{
		var sb = new StringBuilder();
		sb.Append("class BankAccountsBankAccountUidBody {\n");
		sb.Append("  Balance: ").Append(Balance).Append("\n");
		sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
		sb.Append("}\n");
		return sb.ToString();
	}

	/// <summary>
	///     Returns the JSON string presentation of the object
	/// </summary>
	/// <returns>JSON string presentation of the object</returns>
	public string ToJson()
	{
		return JsonConvert.SerializeObject(this, Formatting.Indented);
	}

	/// <summary>
	///     Returns true if objects are equal
	/// </summary>
	/// <param name="input">Object to be compared</param>
	/// <returns>Boolean</returns>
	public override bool Equals(object input)
	{
		return Equals(input as BankAccountsBankAccountUidBody);
	}

	/// <summary>
	///     Gets the hash code
	/// </summary>
	/// <returns>Hash code</returns>
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hashCode = 41;
			if (Balance != null)
			{
				hashCode = hashCode * 59 + Balance.GetHashCode();
			}

			if (CurrencyCode != null)
			{
				hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
			}

			return hashCode;
		}
	}
}
